#########################################################################
# Copyright 2017-2018 VMware Inc.
# This file is part of VNF-ONboarding
# All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# For those usages not covered by the Apache License, Version 2.0 please
# contact:  osslegalrouting@vmware.com

###########################################################################

tosca_definitions_version: cloudify_dsl_1_3
# {{ vnf_description }}

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4.1/types.yaml
  - http://getcloudify.org.s3.amazonaws.com/spec/openstack-plugin/2.0/plugin.yaml

inputs:
  name:
    default: {{ vnf_name }}
  image_id: 
    default: {{ image_id }}
  flavor_id:
    default: {{ flavor }}
  network1_name:
    default: {{ nic1_name }}
  network2_name:
    default: {{ nic2_name }}
  network3_name:
    default: {{ nic3_name }}
{% if nic4_name %}
  network4_name:
    default: {{ nic4_name }}
{% endif %} {% if nic5_name %}
  network5_name:
    default: {{ nic5_name }}
{% endif %}
  openstack_config:
    default: {}

node_templates:
  
  {{ vnf_name }}_host:
    type: cloudify.openstack.nodes.Server
    properties:
      image: { get_input: image_id }
      flavor: { get_input: flavor_id }
      server:
        name: { get_input: name }
      agent_config:
        install_method: none
      openstack_config: { get_input: openstack_config }
    relationships:
      - type: cloudify.relationships.connected_to
        target: network1
      - type: cloudify.relationships.connected_to
        target: network2 
      - type: cloudify.relationships.connected_to
        target: network3 {% if nic4_name %}
      - type: cloudify.relationships.connected_to
        target: network4 {% endif %}{% if nic5_name %}
      - type: cloudify.relationships.connected_to
        target: network5 {% endif %}


{% if scripts %}  {{ vnf_name }}:
    type: cloudify.nodes.SoftwareComponent
    interfaces:
      cloudify.interfaces.lifecycle: {% if scripts.create %}
        create:
          implementation: {{ scripts.create }}
          executor: central_deployment_agent
          inputs:
            process:
              env:
                HOST_IP: { get_attribute: [{{ vnf_name }}_host, ip] }{% endif %} {% if scripts.configure %}
        configure:
          implementation: {{ scripts.configure }}
          executor: central_deployment_agent
          inputs:
            process:
              env:
                HOST_IP: { get_attribute: [{{ vnf_name }}_host, ip] }{% endif %} {% if scripts.start %}
        delete:
          implementation: {{ scripts.delete }}
          executor: central_deployment_agent
          inputs:
            process:
              env:
                HOST_IP: { get_attribute: [{{ vnf_name }}_host, ip] }{% endif %}
    relationships:
      - type: cloudify.relationships.contained_in
        target: {{ vnf_name }}_host
{% endif %}
        
  network1:
    type: cloudify.openstack.nodes.Network
    properties:
      use_external_resource: true
      resource_id: { get_input: network1_name }
      openstack_config: { get_input: openstack_config }

  network2:
    type: cloudify.openstack.nodes.Network
    properties:
      use_external_resource: true
      resource_id: { get_input: network2_name }
      openstack_config: { get_input: openstack_config }

  network3:
    type: cloudify.openstack.nodes.Network
    properties:
      use_external_resource: true
      resource_id: { get_input: network3_name }
      openstack_config: { get_input: openstack_config }
{% if nic4_name %}
  network4:
    type: cloudify.openstack.nodes.Network
    properties:
      use_external_resource: true
      resource_id: { get_input: network4_name }
      openstack_config: { get_input: openstack_config } {% endif %}
{% if nic5_name %}
  network5:
    type: cloudify.openstack.nodes.Network
    properties:
      use_external_resource: true
      resource_id: { get_input: network5_name }
      openstack_config: { get_input: openstack_config } {% endif %}
